basePath: /
definitions:
  db.CreateUserParams:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
    type: object
  db.User:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      password:
        type: string
    type: object
  handlers.LoginParams:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  utils.BaseResponse-any:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  utils.BaseResponse-array_db_User:
    properties:
      data:
        items:
          $ref: '#/definitions/db.User'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  utils.BaseResponse-db_User:
    properties:
      data:
        $ref: '#/definitions/db.User'
      message:
        type: string
      success:
        type: boolean
    type: object
  utils.BaseResponse-string:
    properties:
      data:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:9000
info:
  contact: {}
  description: Docs for LinkVault API
  title: LinkVault API
  version: "1.0"
paths:
  /auth:
    post:
      parameters:
      - description: Login params
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseResponse-string'
      summary: Log in to user account
      tags:
      - auth
  /users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseResponse-array_db_User'
      summary: Get many users
      tags:
      - users
    post:
      parameters:
      - description: create user param
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/db.CreateUserParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
      summary: Create user
      tags:
      - users
  /users/{userId}:
    delete:
      parameters:
      - description: User id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseResponse-db_User'
      summary: Delete one user by ID
      tags:
      - users
    get:
      parameters:
      - description: User id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseResponse-db_User'
      summary: Get one user by ID
      tags:
      - users
    put:
      parameters:
      - description: User id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseResponse-db_User'
      summary: Update one user by ID
      tags:
      - users
swagger: "2.0"
