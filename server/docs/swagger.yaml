basePath: /
definitions:
  dtos.AuthLoginDto:
    properties:
      email:
        format: email
        type: string
      password:
        minLength: 8
        type: string
    type: object
  dtos.CreateFolderDto:
    properties:
      name:
        type: string
    type: object
  dtos.CreateLinkDto:
    properties:
      cover_url:
        format: url
        type: string
      excerpt:
        type: string
      title:
        type: string
      url:
        format: url
        type: string
    required:
    - cover_url
    - excerpt
    - url
    type: object
  dtos.CreateUserDto:
    properties:
      email:
        format: email
        type: string
      full_name:
        type: string
      password:
        minLength: 8
        type: string
    type: object
  dtos.UpdateFolderDto:
    properties:
      name:
        type: string
    type: object
  dtos.UpdateLinkDto:
    properties:
      cover_url:
        format: url
        type: string
      excerpt:
        format: url
        type: string
      title:
        type: string
    required:
    - cover_url
    - excerpt
    type: object
  entities.FolderEntity:
    properties:
      created_at:
        format: date-time
        type: string
      id:
        format: uuid
        type: string
      name:
        type: string
      owner_id:
        format: uuid
        type: string
      updated_at:
        format: date-time
        type: string
    type: object
  entities.LinkEntity:
    properties:
      cover_url:
        type: string
      created_at:
        format: date-time
        type: string
      excerpt:
        type: string
      folder_id:
        format: uuid
        type: string
      id:
        format: uuid
        type: string
      owner_id:
        format: uuid
        type: string
      title:
        type: string
      updated_at:
        format: date-time
        type: string
      url:
        type: string
    type: object
  entities.UserEntity:
    properties:
      created_at:
        format: date-time
        type: string
      email:
        format: email
        type: string
      full_name:
        type: string
      id:
        format: uuid
        type: string
      updated_at:
        format: date-time
        type: string
    type: object
  utils.BaseResponse-any:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  utils.BaseResponse-array_entities_UserEntity:
    properties:
      data:
        items:
          $ref: '#/definitions/entities.UserEntity'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  utils.BaseResponse-entities_FolderEntity:
    properties:
      data:
        $ref: '#/definitions/entities.FolderEntity'
      message:
        type: string
      success:
        type: boolean
    type: object
  utils.BaseResponse-entities_LinkEntity:
    properties:
      data:
        $ref: '#/definitions/entities.LinkEntity'
      message:
        type: string
      success:
        type: boolean
    type: object
  utils.BaseResponse-entities_UserEntity:
    properties:
      data:
        $ref: '#/definitions/entities.UserEntity'
      message:
        type: string
      success:
        type: boolean
    type: object
  utils.BaseResponse-string:
    properties:
      data:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:9000
info:
  contact: {}
  description: Docs for LinkVault API
  title: LinkVault API
  version: "1.0"
paths:
  /auth:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseResponse-entities_UserEntity'
      summary: Get whether token is valid or not
      tags:
      - auth
    post:
      parameters:
      - description: Login params
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dtos.AuthLoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseResponse-string'
      summary: Log in to user account
      tags:
      - auth
  /folders:
    get:
      consumes:
      - application/json
      parameters:
      - description: Folder id
        in: path
        name: folderId
        required: true
        type: string
      responses:
        "201":
          description: Folder(s) found
          schema:
            $ref: '#/definitions/utils.BaseResponse-entities_FolderEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
      security:
      - Bearer: []
      summary: Get details about a folder belongs to user
      tags:
      - folder
    post:
      consumes:
      - application/json
      parameters:
      - description: Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateFolderDto'
      responses:
        "201":
          description: Successfully created a folder
          schema:
            $ref: '#/definitions/utils.BaseResponse-entities_FolderEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
      security:
      - Bearer: []
      summary: Create a folder
      tags:
      - folder
  /folders/{folderId}:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Folder ID
        in: path
        name: folderId
        required: true
        type: string
      - description: Update folder payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateFolderDto'
      responses:
        "201":
          description: Folder(s) found
          schema:
            $ref: '#/definitions/utils.BaseResponse-entities_FolderEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
      security:
      - Bearer: []
      summary: Update folder detail
      tags:
      - folder
  /folders/{folderId}/links:
    get:
      consumes:
      - application/json
      parameters:
      - description: Folder ID
        in: path
        name: folderId
        required: true
        type: string
      - description: Search matching title
        in: query
        name: title
        type: string
      - description: Search matching excerpt
        in: query
        name: excerpt
        type: string
      - default: updatedAt_DESC
        description: Order by title, created date, or modified date
        in: query
        name: orderBy
        type: string
      - default: 10
        description: Limit every page
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page count
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: Successfully created user
          schema:
            items:
              $ref: '#/definitions/utils.BaseResponse-entities_LinkEntity'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
      security:
      - Bearer: []
      summary: Get many link belongs to a user inside a folder
      tags:
      - link
    post:
      consumes:
      - application/json
      parameters:
      - description: Folder ID
        in: path
        name: folderId
        required: true
        type: string
      - description: Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateLinkDto'
      responses:
        "201":
          description: Successfully created a link
          schema:
            $ref: '#/definitions/utils.BaseResponse-entities_LinkEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
      security:
      - Bearer: []
      summary: Create link
      tags:
      - link
  /links:
    get:
      consumes:
      - application/json
      parameters:
      - description: Search matching title
        in: query
        name: title
        type: string
      - description: Search matching excerpt
        in: query
        name: excerpt
        type: string
      - default: updatedAt_DESC
        description: Order by title, created date, or modified date
        in: query
        name: orderBy
        type: string
      - default: 10
        description: Limit every page
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page count
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: Successfully created user
          schema:
            items:
              $ref: '#/definitions/utils.BaseResponse-entities_LinkEntity'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
      security:
      - Bearer: []
      summary: Get many link
      tags:
      - link
  /links/{linkId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Link ID
        in: path
        name: linkId
        required: true
        type: string
      responses:
        "200":
          description: Successfully deleted a link
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
        "500":
          description: Failed to delete a link
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
      security:
      - Bearer: []
      summary: Delete one link by ID
      tags:
      - link
    get:
      consumes:
      - application/json
      parameters:
      - description: Link ID
        in: path
        name: linkId
        required: true
        type: string
      responses:
        "200":
          description: Successfully updated a link
          schema:
            $ref: '#/definitions/utils.BaseResponse-entities_LinkEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
      security:
      - Bearer: []
      summary: Get one link by ID
      tags:
      - link
    patch:
      consumes:
      - application/json
      parameters:
      - description: Link ID
        in: path
        name: linkId
        required: true
        type: string
      - description: Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateLinkDto'
      responses:
        "200":
          description: Successfully updated a link
          schema:
            $ref: '#/definitions/utils.BaseResponse-entities_LinkEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.BaseResponse-any'
      security:
      - Bearer: []
      summary: Update one link by ID
      tags:
      - link
  /users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseResponse-array_entities_UserEntity'
      summary: Get many users
      tags:
      - users
    post:
      parameters:
      - description: create user param
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateUserDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.BaseResponse-entities_UserEntity'
      summary: Create user
      tags:
      - users
  /users/{userId}:
    delete:
      parameters:
      - description: User id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseResponse-entities_UserEntity'
      security:
      - Bearer: []
      summary: Delete one user by ID
      tags:
      - users
    get:
      parameters:
      - description: User id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseResponse-entities_UserEntity'
      security:
      - Bearer: []
      summary: Get one user by ID
      tags:
      - users
    patch:
      parameters:
      - description: User id
        in: path
        name: userId
        required: true
        type: string
      - description: create user param
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.BaseResponse-entities_UserEntity'
      security:
      - Bearer: []
      summary: Update one user by ID
      tags:
      - users
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
